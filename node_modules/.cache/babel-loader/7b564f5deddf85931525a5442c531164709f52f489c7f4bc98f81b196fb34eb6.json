{"ast":null,"code":"var _jsxFileName = \"/Users/phicosdev/fajar/weather/src/App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport './App.css';\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Title = styled.h1`\n  font-size: 2em;\n`;\nconst Flex = styled.div`\n    display: flex;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`;\n_c = Flex;\nconst FlexRow = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    gap: 16px;\n`;\nfunction App() {\n  _s();\n  const [unit, setUnit] = useState('metric');\n  const [data, setData] = useState({\n    temp: 10,\n    city: '',\n    humidity: 10,\n    speed: 2,\n    timezone: 0,\n    icons: ''\n  });\n  const handleClick = () => {\n    if (city !== \"\") {\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=281b1bf64dd901bf03d0cb8dbb2f18dd&units=${unit}`;\n      axios.get(url).then(res => {\n        setData({\n          ...data,\n          temp: res.data.main.temp,\n          mintemp: res.data.main.temp_min,\n          maxtemp: res.data.main.temp_max,\n          humidity: res.data.main.humidity,\n          timezone: res.data.timezone,\n          feels_like: res.data.main.feels_like,\n          wind: res.data.wind.speed,\n          city: res.data.name,\n          icons: res.data.weather[0].icon\n        });\n        setError('');\n        console.log(res.data);\n      })\n      //\n      .catch(err => {\n        if (err.response.status == 404) {\n          setError(\"Invalid City Name!\");\n        } else {\n          setError('');\n        }\n      });\n    }\n  };\n  const [city, setCity] = useState('');\n  const [error, setError] = useState('');\n  const [localTime, setLocalTime] = useState(new Date());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLocalTime(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const utcTimestamp = localTime.getTime() + localTime.getTimezoneOffset() * 60000;\n  const offsetTimestamp = utcTimestamp + data.timezone * 1000;\n  const localTimeWithOffset = new Date(offsetTimestamp).toLocaleTimeString();\n  const iconUrl = `https://openweathermap.org/img/wn/${data.icons}@2x.png`;\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zaO/067FPrp0tbT/Z76H4QlWG8g=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Flex\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","styled","Button","Container","Form","jsxDEV","_jsxDEV","Title","h1","Flex","div","_c","FlexRow","App","_s","unit","setUnit","data","setData","temp","city","humidity","speed","timezone","icons","handleClick","url","get","then","res","main","mintemp","temp_min","maxtemp","temp_max","feels_like","wind","name","weather","icon","setError","console","log","catch","err","response","status","setCity","error","localTime","setLocalTime","Date","interval","setInterval","clearInterval","utcTimestamp","getTime","getTimezoneOffset","offsetTimestamp","localTimeWithOffset","toLocaleTimeString","iconUrl","className","children","Row","Col","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/phicosdev/fajar/weather/src/App.js"],"sourcesContent":["// import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport './App.css';\nimport { Button, Container, Form } from \"react-bootstrap\";\n\n\nconst Title = styled.h1`\n  font-size: 2em;\n`;\n\nconst Flex = styled.div`\n    display: flex;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`;\n\nconst FlexRow = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: center;\n    gap: 16px;\n`;\n\nfunction App() {\n  const [unit, setUnit] = useState('metric');\n\n  const [data, setData] = useState({\n    temp: 10,\n    city: '',\n    humidity: 10,\n    speed: 2,\n    timezone: 0,\n    icons: ''\n\n  });\n\n\n\n\n  const handleClick = () => {\n    if (city !== \"\") {\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=281b1bf64dd901bf03d0cb8dbb2f18dd&units=${unit}`;\n      axios\n        .get(url)\n        .then(res => {\n          setData({\n            ...data,\n            temp: res.data.main.temp,\n            mintemp: res.data.main.temp_min,\n            maxtemp: res.data.main.temp_max,\n            humidity: res.data.main.humidity,\n            timezone: res.data.timezone,\n            feels_like: res.data.main.feels_like,\n            wind: res.data.wind.speed,\n            city: res.data.name,\n            icons: res.data.weather[0].icon\n          });\n          setError('');\n          console.log(res.data);\n        })\n        //\n        .catch(err => {\n          if (err.response.status == 404) {\n            setError(\"Invalid City Name!\")\n          }\n          else {\n            setError('')\n          }\n        });\n    }\n  }\n  const [city, setCity] = useState('');\n  const [error, setError] = useState('');\n\n\n\n  const [localTime, setLocalTime] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLocalTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const utcTimestamp = localTime.getTime() + (localTime.getTimezoneOffset() * 60000);\n  const offsetTimestamp = utcTimestamp + (data.timezone * 1000);\n  const localTimeWithOffset = new Date(offsetTimestamp).toLocaleTimeString();\n\n  const iconUrl = `https://openweathermap.org/img/wn/${data.icons}@2x.png`;\n\n  return (\n    <Flex className=\"App\">\n      {/* <select id=\"unit-select\" value={unit} onChange={handleUnitChange}>\n        <option value=\"metric\">Metric</option>\n        <option value=\"imperial\">Imperial</option>\n      </select> */}\n\n      <Container className=\"\">\n        <Row>\n          <Col>\n\n          </Col>\n        </Row>\n      </Container>\n    </Flex>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}