{"ast":null,"code":"var _jsxFileName = \"/Users/phicosdev/fajar/weather/src/components/BigCities.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BigCities() {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  useEffect(() => {\n    const cities = [\"Tokyo\", \"New York\", \"Shanghai\", \"London\", \"Paris\", \"Los Angeles\", \"Moscow\"];\n    const unit = \"metric\"; // or \"imperial\" for Fahrenheit\n    const urls = cities.map(city => `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=281b1bf64dd901bf03d0cb8dbb2f18dd&units=${unit}`);\n    Promise.all(urls.map(url => axios.get(url))).then(responses => {\n      const data = responses.map(response => response.data);\n      setWeatherData(data);\n    }).catch(err => {\n      if (err.response.status === 404) {\n        setError(\"Invalid City Name!\");\n      } else {\n        setError(\"\");\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: weatherData.map((cityData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: cityData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", cityData.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(BigCities, \"/WBsAESNl5X9UOGQ8x5/AmmeTCo=\");\n_c = BigCities;\nexport default BigCities;\nvar _c;\n$RefreshReg$(_c, \"BigCities\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BigCities","_s","weatherData","setWeatherData","cities","unit","urls","map","city","Promise","all","url","axios","get","then","responses","data","response","catch","err","status","setError","children","cityData","index","className","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","_c","$RefreshReg$"],"sources":["/Users/phicosdev/fajar/weather/src/components/BigCities.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction BigCities() {\n    const [weatherData, setWeatherData] = useState([]);\n\n    useEffect(() => {\n        const cities = [\"Tokyo\", \"New York\", \"Shanghai\", \"London\", \"Paris\", \"Los Angeles\", \"Moscow\"];\n        const unit = \"metric\"; // or \"imperial\" for Fahrenheit\n        const urls = cities.map(city => `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=281b1bf64dd901bf03d0cb8dbb2f18dd&units=${unit}`);\n\n        Promise.all(urls.map(url => axios.get(url)))\n            .then(responses => {\n                const data = responses.map(response => response.data);\n                setWeatherData(data);\n\n            })\n            .catch(err => {\n                if (err.response.status === 404) {\n                    setError(\"Invalid City Name!\");\n                } else {\n                    setError(\"\");\n                }\n            });\n    }, []);\n\n\n    return (\n        <div>\n            {weatherData.map((cityData, index) => (\n                <div className=\"card\" key={index}>\n                    <h2>{cityData.name}</h2>\n                    <p>Temperature: {cityData.main.temp}&deg;C</p>\n                </div>\n            ))}\n        </div>\n    );\n\n}\n\nexport default BigCities;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,MAAMO,MAAM,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,CAAC;IAC5F,MAAMC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACvB,MAAMC,IAAI,GAAGF,MAAM,CAACG,GAAG,CAACC,IAAI,IAAK,qDAAoDA,IAAK,iDAAgDH,IAAK,EAAC,CAAC;IAEjJI,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACC,GAAG,CAACI,GAAG,IAAIC,KAAK,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC,CAAC,CACvCG,IAAI,CAACC,SAAS,IAAI;MACf,MAAMC,IAAI,GAAGD,SAAS,CAACR,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACD,IAAI,CAAC;MACrDb,cAAc,CAACa,IAAI,CAAC;IAExB,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAI;MACV,IAAIA,GAAG,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC7BC,QAAQ,CAAC,oBAAoB,CAAC;MAClC,CAAC,MAAM;QACHA,QAAQ,CAAC,EAAE,CAAC;MAChB;IACJ,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAGN,oBACItB,OAAA;IAAAuB,QAAA,EACKpB,WAAW,CAACK,GAAG,CAAC,CAACgB,QAAQ,EAAEC,KAAK,kBAC7BzB,OAAA;MAAK0B,SAAS,EAAC,MAAM;MAAAH,QAAA,gBACjBvB,OAAA;QAAAuB,QAAA,EAAKC,QAAQ,CAACG;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACxB/B,OAAA;QAAAuB,QAAA,GAAG,eAAa,EAACC,QAAQ,CAACQ,IAAI,CAACC,IAAI,EAAC,OAAM;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAAA,GAFvBN,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAInC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAGd;AAAC7B,EAAA,CAnCQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAqClB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}