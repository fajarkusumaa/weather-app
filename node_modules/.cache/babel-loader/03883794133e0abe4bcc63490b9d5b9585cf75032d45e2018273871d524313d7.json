{"ast":null,"code":"var _jsxFileName = \"/Users/phicosdev/fajar/weather/src/components/BigCities.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BigCities() {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  useEffect(() => {\n    const cities = [\"Tokyo\", \"New York\", \"Shanghai\", \"London\", \"Paris\", \"Los Angeles\", \"Moscow\"];\n    const apiKey = \"YOUR_API_KEY_HERE\";\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cities.join()}&units=metric&appid=${apiKey}`;\n    fetch(apiUrl).then(response => response.json()).then(data => setWeatherData(data.list)).catch(error => console.error(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Array.isArray(weatherData) && weatherData.map(city => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: city.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current temperature: \", city.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Weather description: \", city.weather[0].description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", city.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind speed: \", city.wind.speed, \" km/h\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this)]\n    }, city.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_s(BigCities, \"/WBsAESNl5X9UOGQ8x5/AmmeTCo=\");\n_c = BigCities;\nexport default BigCities;\nvar _c;\n$RefreshReg$(_c, \"BigCities\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BigCities","_s","weatherData","setWeatherData","cities","apiKey","apiUrl","join","fetch","then","response","json","data","list","catch","error","console","children","Array","isArray","map","city","name","fileName","_jsxFileName","lineNumber","columnNumber","main","temp","weather","description","humidity","wind","speed","id","_c","$RefreshReg$"],"sources":["/Users/phicosdev/fajar/weather/src/components/BigCities.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction BigCities() {\n    const [weatherData, setWeatherData] = useState([]);\n\n    useEffect(() => {\n        const cities = [\"Tokyo\", \"New York\", \"Shanghai\", \"London\", \"Paris\", \"Los Angeles\", \"Moscow\"];\n        const apiKey = \"YOUR_API_KEY_HERE\";\n        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${cities.join()}&units=metric&appid=${apiKey}`;\n\n        fetch(apiUrl)\n            .then(response => response.json())\n            .then(data => setWeatherData(data.list))\n            .catch(error => console.error(error));\n    }, []);\n\n    return (\n        <div>\n            {Array.isArray(weatherData) && weatherData.map(city => (\n                <div key={city.id}>\n                    <h2>{city.name}</h2>\n                    <p>Current temperature: {city.main.temp}Â°C</p>\n                    <p>Weather description: {city.weather[0].description}</p>\n                    <p>Humidity: {city.main.humidity}%</p>\n                    <p>Wind speed: {city.wind.speed} km/h</p>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default BigCities;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACZ,MAAMO,MAAM,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,CAAC;IAC5F,MAAMC,MAAM,GAAG,mBAAmB;IAClC,MAAMC,MAAM,GAAI,qDAAoDF,MAAM,CAACG,IAAI,EAAG,uBAAsBF,MAAO,EAAC;IAEhHG,KAAK,CAACF,MAAM,CAAC,CACRG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,cAAc,CAACS,IAAI,CAACC,IAAI,CAAC,CAAC,CACvCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EAC7C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIhB,OAAA;IAAAkB,QAAA,EACKC,KAAK,CAACC,OAAO,CAACjB,WAAW,CAAC,IAAIA,WAAW,CAACkB,GAAG,CAACC,IAAI,iBAC/CtB,OAAA;MAAAkB,QAAA,gBACIlB,OAAA;QAAAkB,QAAA,EAAKI,IAAI,CAACC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACpB3B,OAAA;QAAAkB,QAAA,GAAG,uBAAqB,EAACI,IAAI,CAACM,IAAI,CAACC,IAAI,EAAC,OAAE;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAC9C3B,OAAA;QAAAkB,QAAA,GAAG,uBAAqB,EAACI,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACzD3B,OAAA;QAAAkB,QAAA,GAAG,YAAU,EAACI,IAAI,CAACM,IAAI,CAACI,QAAQ,EAAC,GAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACtC3B,OAAA;QAAAkB,QAAA,GAAG,cAAY,EAACI,IAAI,CAACW,IAAI,CAACC,KAAK,EAAC,OAAK;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;IAAA,GALnCL,IAAI,CAACa,EAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAOpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEd;AAACzB,EAAA,CA3BQD,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AA6BlB,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}